{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["SortingVisualizer","props","state","array","this","resetArray","min","max","i","push","Math","floor","random","setState","className","map","value","idx","style","height","width","margin","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAKqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,IAJQ,E,qDAQnB,WACEC,KAAKC,e,wBAGP,WAEE,IADA,IAiC2BC,EAAKC,EAjC1BJ,EAAQ,GACLK,EAAI,EAAGA,EAjBS,GAiBiBA,IACxCL,EAAMM,MA+BmBH,EA/BQ,EA+BHC,EA/BM,GAgCjCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,KA9BlDF,KAAKS,SAAS,CAAEV,Y,oBAGlB,WAAU,IAAD,OACCA,EAAUC,KAAKF,MAAfC,MAER,OACE,sBAAKW,UAAU,uBAAf,UACE,qBAAKA,UAAU,kBAAf,SACGX,EAAMY,KAAI,SAACC,EAAOC,GAAR,OACT,qBACEH,UAAU,YAEVI,MAAO,CACLC,OAAO,GAAD,OAAKH,EAAL,KACNI,MAAM,GAAD,OAAM,EAAN,KACLC,OAAQ,eAAW,GAAX,OAJLJ,QASX,qBAAKH,UAAU,iBAAf,SACE,wBAAQQ,QAAS,kBAAM,EAAKjB,cAA5B,+B,GAxCqCkB,IAAMC,W,MCOtCC,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e710893d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 50;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 80));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"visualizer-container\">\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                height: `${value}%`,\r\n                width: `${(100 * 0.5) / NUMBER_OF_ARRAY_BARS}%`,\r\n                margin: \"0 \" + `${(100 * 0.25) / NUMBER_OF_ARRAY_BARS}%`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu-container\">\r\n          <button onClick={() => this.resetArray()}>Generate</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}