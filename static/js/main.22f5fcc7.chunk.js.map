{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["NORMAL_COLOR","COMPLETE_COLOR","SortingVisualizer","props","state","array","sorted","sortInProgress","awaitingReset","this","changeBarToColor","a","index","color","arrayBars","style","backgroundColor","shouldStartNewSort","setState","round","document","getElementsByClassName","innerSorted","i","changeBarsToColor","leftBarColor","rightBarColor","sleep","tempArr","slice","temp","length","timeToSleep","Promise","resolve","setTimeout","reset","resetArray","resetColors","forceUpdate","push","min","max","Math","floor","random","className","map","value","idx","height","width","margin","onClick","bubbleSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.22f5fcc7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 50;\r\nconst ANIMATION_SPEED = 1;\r\n\r\nconst NORMAL_COLOR = \"white\";\r\nconst COMPARE_COLOR = \"orange\";\r\nconst SWAP_COLOR = \"red\";\r\nconst COMPLETE_COLOR = \"green\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [], //array to track the value of the bars\r\n      sorted: false, //boolean to track whether array is sorted\r\n      sortInProgress: false, //boolean to track whether a sort is currently in progress\r\n      awaitingReset: false, //boolean that used to halt any sortings in progress\r\n    };\r\n  }\r\n\r\n  //Check if a new sort should begin\r\n  shouldStartNewSort() {\r\n    if (this.state.sorted || this.state.sortInProgress) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async bubbleSort() {\r\n    let shouldStart = this.shouldStartNewSort();\r\n    if (!shouldStart) {\r\n      return;\r\n    }\r\n\r\n    await this.setState({ sortInProgress: true });\r\n    //Keep track of how many times we've iterated\r\n    let round = 0;\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    let innerSorted = false;\r\n\r\n    while (!this.state.sorted && this.state.sortInProgress && !innerSorted) {\r\n      innerSorted = true;\r\n    \r\n      //Check array for any i > i+1\r\n      for (let i = 0; i < this.state.array.length - 1 - round; i++) {\r\n        if (this.state.awaitingReset) {\r\n          await this.setState({ awaitingReset: false });\r\n          return;\r\n        }\r\n        const leftBarColor = arrayBars[i].style;\r\n        const rightBarColor = arrayBars[i + 1].style;\r\n\r\n        function changeBarsToColor(color) {\r\n          leftBarColor.backgroundColor = color;\r\n          rightBarColor.backgroundColor = color;\r\n        }\r\n\r\n        changeBarsToColor(COMPARE_COLOR);\r\n        await this.sleep(ANIMATION_SPEED);\r\n\r\n        if (this.state.array[i] > this.state.array[i + 1]) {\r\n          innerSorted = false;\r\n          changeBarsToColor(SWAP_COLOR);\r\n          await this.sleep(ANIMATION_SPEED);\r\n\r\n          let tempArr = this.state.array.slice();\r\n          let temp = tempArr[i + 1];\r\n\r\n          tempArr[i + 1] = tempArr[i];\r\n          tempArr[i] = temp;\r\n          await this.setState({ array: tempArr });\r\n        }\r\n\r\n        changeBarsToColor(NORMAL_COLOR);\r\n        await this.sleep(ANIMATION_SPEED);\r\n      }\r\n      changeBarToColor(this.state.array.length - round - 1, COMPLETE_COLOR);\r\n      round++;\r\n    }\r\n\r\n    //At this point, we know the rest are in order, no need to check\r\n    await this.setState({ sorted: true });\r\n\r\n    for (let i = 0; i < this.state.array.length - round; i++) {\r\n      changeBarToColor(i, COMPLETE_COLOR);\r\n    }\r\n    await this.setState({ sortInProgress: false });\r\n\r\n    function changeBarToColor(index, color) {\r\n      arrayBars[index].style.backgroundColor = color;\r\n    }\r\n  }\r\n\r\n  async sleep(timeToSleep) {\r\n    await new Promise((resolve) => setTimeout(resolve, timeToSleep));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reset();\r\n  }\r\n\r\n  async reset() {\r\n    if (this.state.sortInProgress) {\r\n      await this.setState({ awaitingReset: true });\r\n    }\r\n\r\n    this.resetArray();\r\n    this.resetColors();\r\n    await this.setState({ sorted: false });\r\n    await this.setState({ sortInProgress: false });\r\n  }\r\n\r\n  resetColors() {\r\n    for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      arrayBars[i].style.backgroundColor = NORMAL_COLOR;\r\n    }\r\n  }\r\n\r\n  async resetArray() {\r\n    this.resetColors();\r\n    this.forceUpdate();\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 80));\r\n    }\r\n    await this.setState({ array: array });\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    \r\n    return (\r\n      <div className=\"visualizer-container\">\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: NORMAL_COLOR,\r\n                height: `${value}%`,\r\n                width: `${(100 * 0.5) / NUMBER_OF_ARRAY_BARS}%`,\r\n                margin: `0 ${(100 * 0.25) / NUMBER_OF_ARRAY_BARS}%`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu-container\">\r\n          <button onClick={() => this.reset()}>Generate</button>\r\n          <button onClick={() => this.bubbleSort()}>Bubble</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}