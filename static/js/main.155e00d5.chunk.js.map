{"version":3,"sources":["SortingVisualizer/Constants.js","SortingVisualizer/Helper.js","Sorting/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["NORMAL_COLOR","COMPARE_COLOR","COMPLETE_COLOR","sleep","timeToSleep","a","Promise","resolve","setTimeout","BubbleSort","array","colorArr","awaitingReset","setState","shouldStartNewSort","console","log","sortInProgress","round","innerSorted","i","length","Constants","Helper","temp","sorted","SortingVisualizer","props","state","this","slice","bind","reset","resetArray","resetColors","push","min","max","Math","floor","random","className","map","value","idx","style","backgroundColor","height","width","margin","onClick","bubbleSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.155e00d5.chunk.js","sourcesContent":["export const NUMBER_OF_ARRAY_BARS = 30;\r\nexport const ANIMATION_SPEED = 1;\r\n\r\nexport const NORMAL_COLOR = \"white\";\r\nexport const COMPARE_COLOR = \"orange\";\r\nexport const SWAP_COLOR = \"red\";\r\nexport const COMPLETE_COLOR = \"green\";\r\n","export async function sleep(timeToSleep) {\r\n    await new Promise((resolve) => setTimeout(resolve, timeToSleep));\r\n  }","// export default BubbleSort;\r\nimport * as Constants from \"../SortingVisualizer/Constants\";\r\nimport * as Helper from \"../SortingVisualizer/Helper\";\r\n\r\nconst BubbleSort = async (\r\n  array,\r\n  colorArr,\r\n  awaitingReset,\r\n  setState,\r\n  shouldStartNewSort\r\n) => {\r\n  if (!shouldStartNewSort()) {\r\n    console.log(\"Sort in progress or already sorted\");\r\n    return;\r\n  }\r\n  console.log(\"this shit is broken\");\r\n\r\n  setState({ sortInProgress: true });\r\n\r\n  //Keep track of how many times we've iterated\r\n  let round = 0;\r\n  let innerSorted = false;\r\n\r\n  while (!innerSorted) {\r\n    //console.log(\"Round:\" + round);\r\n    innerSorted = true;\r\n\r\n    for (let i = 0; i < array.length - 1 - round; i++) {\r\n      //If we are awaiting a reset, stop immediately and update state\r\n      if (awaitingReset) {\r\n        setState({ awaitingReset: false, sortInProgress: false });\r\n        return;\r\n      }\r\n\r\n      //console.log(\"Comparing \" + array[i] + \" and \" + array[i + 1]);\r\n      colorArr[i] = Constants.COMPARE_COLOR;\r\n      colorArr[i + 1] = Constants.COMPARE_COLOR;\r\n      setState({ colorArr: colorArr });\r\n\r\n      await Helper.sleep(Constants.ANIMATION_SPEED);\r\n\r\n      //Not in order found\r\n      if (array[i] > array[i + 1]) {\r\n        innerSorted = false;\r\n\r\n        //console.log(\"Swapping \" + array[i] + \" and \" + array[i + 1]);\r\n        colorArr[i] = Constants.SWAP_COLOR;\r\n        colorArr[i + 1] = Constants.SWAP_COLOR;\r\n        setState({ colorArr: colorArr });\r\n\r\n        await Helper.sleep(Constants.ANIMATION_SPEED);\r\n\r\n        let temp = array[i + 1];\r\n        array[i + 1] = array[i];\r\n        array[i] = temp;\r\n\r\n        setState({ array: array });\r\n\r\n        // setState((array) => {\r\n        //   let temp = array[i + 1];\r\n        //   array[i + 1] = array[i];\r\n        //   array[i] = temp;\r\n\r\n        //   let tempArr = array.slice();\r\n        //   console.log(Object.prototype.toString.call(tempArr) == '[object Array]');\r\n        //   return { array: tempArr };\r\n        // });\r\n      }\r\n\r\n      colorArr[i] = Constants.NORMAL_COLOR;\r\n      colorArr[i + 1] = Constants.NORMAL_COLOR;\r\n      setState({ colorArr: colorArr });\r\n      await Helper.sleep(Constants.ANIMATION_SPEED);\r\n    }\r\n\r\n    //Every sweep, we update the highest bar to completed\r\n    //console.log(\"Single sorted: \" + array[array.length - round - 1]);\r\n    colorArr[array.length - round - 1] = Constants.COMPLETE_COLOR;\r\n    setState({ colorArr: colorArr });\r\n    //console.log(round);\r\n    round++;\r\n  }\r\n\r\n  //At this point, we know the rest are in order\r\n  setState({ sorted: true });\r\n  setState({ sortInProgress: false });\r\n  for (let i = 0; i < array.length - round; i++) {\r\n    colorArr[i] = Constants.COMPLETE_COLOR;\r\n  }\r\n  setState({ colorArr: colorArr });\r\n  //console.log(array);\r\n};\r\n\r\nexport default BubbleSort;\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport BubbleSort from \"../Sorting/BubbleSort\";\r\nimport * as Constants from \"./Constants\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [], //array to track the value of the bars\r\n      colorArr: [], //array to track the colors of the bars\r\n      sorted: false, //boolean to track whether array is sorted\r\n      sortInProgress: false, //boolean to track whether a sort is currently in progress\r\n      awaitingReset: false, //boolean that used to halt any sortings in progress\r\n    };\r\n  }\r\n\r\n  //Check if a new sort should begin\r\n  shouldStartNewSort() {\r\n    if (this.state.sorted || this.state.sortInProgress) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  bubbleSort() {\r\n    BubbleSort(\r\n      this.state.array.slice(),\r\n      this.state.colorArr.slice(),\r\n      this.state.awaitingReset,\r\n      this.setState.bind(this),\r\n      this.shouldStartNewSort.bind(this)\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reset();\r\n  }\r\n\r\n  async reset() {\r\n    if (this.state.sortInProgress) {\r\n     //\r\n    }\r\n    this.resetArray();\r\n    this.resetColors();\r\n    this.setState({ sorted: false });\r\n  }\r\n\r\n  async resetColors() {\r\n    const colorArr = [];\r\n    for (let i = 0; i < Constants.NUMBER_OF_ARRAY_BARS; i++) {\r\n      colorArr.push(Constants.NORMAL_COLOR);\r\n    }\r\n    this.setState({ colorArr: colorArr });\r\n  }\r\n\r\n  async resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < Constants.NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 80));\r\n    }\r\n    this.setState({ array: array });\r\n  }\r\n\r\n  render() {\r\n    const { array, colorArr } = this.state;\r\n    return (\r\n      <div className=\"visualizer-container\">\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: `${colorArr[idx]}`,\r\n                height: `${value}%`,\r\n                width: `${50 / Constants.NUMBER_OF_ARRAY_BARS}%`,\r\n                margin: `0 ${25 / Constants.NUMBER_OF_ARRAY_BARS}%`,\r\n              }}\r\n            >\r\n              <p>{value}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu-container\">\r\n          <button onClick={() => this.reset()}>Generate</button>\r\n          <button onClick={() => this.bubbleSort()}>Bubble sort</button>\r\n          <button>TODO: Quick sort</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}