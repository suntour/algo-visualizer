{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["NORMAL_COLOR","COMPLETE_COLOR","SortingVisualizer","props","state","array","colorArr","sorted","sortInProgress","awaitingReset","this","a","shouldStartNewSort","setState","round","innerSorted","i","length","changeBarColors","sleep","tempArr","slice","temp","indexStart","color","indexEnd","tempColorArr","timeToSleep","Promise","resolve","setTimeout","reset","resetArray","resetColors","push","min","max","Math","floor","random","className","map","value","idx","style","backgroundColor","height","width","margin","onClick","bubbleSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23fc34fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 30;\r\nconst ANIMATION_SPEED = 5;\r\n\r\nconst NORMAL_COLOR = \"white\";\r\nconst COMPARE_COLOR = \"orange\";\r\nconst SWAP_COLOR = \"red\";\r\nconst COMPLETE_COLOR = \"green\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [], //array to track the value of the bars\r\n      colorArr: [], //array to track the colors of the bars\r\n      sorted: false, //boolean to track whether array is sorted\r\n      sortInProgress: false, //boolean to track whether a sort is currently in progress\r\n      awaitingReset: false, //boolean that used to halt any sortings in progress\r\n    };\r\n  }\r\n\r\n  //Check if a new sort should begin\r\n  shouldStartNewSort() {\r\n    if (this.state.sorted || this.state.sortInProgress) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async bubbleSort() {\r\n    if (!this.shouldStartNewSort()) {\r\n      return;\r\n    }\r\n\r\n    await this.setState({ sortInProgress: true });\r\n    //Keep track of how many times we've iterated\r\n    let round = 0;\r\n    let innerSorted = false;\r\n\r\n    while (!innerSorted) {\r\n      innerSorted = true;\r\n\r\n      for (let i = 0; i < this.state.array.length - 1 - round; i++) {\r\n        //If we are awaiting a reset, stop immediately and update state\r\n        if (this.state.awaitingReset) {\r\n          await this.setState({ awaitingReset: false });\r\n          await this.setState({ sortInProgress: false });\r\n          return;\r\n        }\r\n\r\n        this.changeBarColors(i, COMPARE_COLOR, i + 1);\r\n        await this.sleep(ANIMATION_SPEED);\r\n\r\n        //Not in order found\r\n        if (this.state.array[i] > this.state.array[i + 1]) {\r\n          innerSorted = false;\r\n\r\n          this.changeBarColors(i, SWAP_COLOR, i + 1);\r\n          await this.sleep(ANIMATION_SPEED);\r\n\r\n          let tempArr = this.state.array.slice();\r\n          let temp = tempArr[i + 1];\r\n\r\n          tempArr[i + 1] = tempArr[i];\r\n          tempArr[i] = temp;\r\n          await this.setState({ array: tempArr });\r\n        }\r\n\r\n        this.changeBarColors(i, NORMAL_COLOR, i + 1);\r\n        await this.sleep(ANIMATION_SPEED);\r\n      }\r\n\r\n      //Every sweep, we update the highest bar to completed\r\n      this.changeBarColors(this.state.array.length - round - 1, COMPLETE_COLOR);\r\n      round++;\r\n    }\r\n\r\n    //At this point, we know the rest are in order\r\n    await this.setState({ sorted: true });\r\n    await this.setState({ sortInProgress: false });\r\n    this.changeBarColors(0, COMPLETE_COLOR, this.state.array.length - round);\r\n  }\r\n\r\n  changeBarColors(indexStart, color, indexEnd) {\r\n    if (indexStart == null || !color) {\r\n      return;\r\n    }\r\n    let tempColorArr = this.state.colorArr.slice();\r\n\r\n    if (indexEnd == null) {\r\n      tempColorArr[indexStart] = color;\r\n      this.setState({ colorArr: tempColorArr });\r\n    } else {\r\n      for (let i = indexStart; i <= indexEnd; i++) {\r\n        tempColorArr[i] = color;\r\n        this.setState({ colorArr: tempColorArr });\r\n      }\r\n    }\r\n  }\r\n\r\n  async sleep(timeToSleep) {\r\n    await new Promise((resolve) => setTimeout(resolve, timeToSleep));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reset();\r\n  }\r\n\r\n  async reset() {\r\n    if (this.state.sortInProgress) {\r\n      await this.setState({ awaitingReset: true });\r\n    }\r\n    this.resetArray();\r\n    this.resetColors();\r\n    await this.setState({ sorted: false });\r\n  }\r\n\r\n  async resetColors() {\r\n    const colorArr = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      colorArr.push(NORMAL_COLOR);\r\n    }\r\n    await this.setState({ colorArr: colorArr });\r\n  }\r\n\r\n  async resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 80));\r\n    }\r\n    await this.setState({ array: array });\r\n  }\r\n\r\n  render() {\r\n    const { array, colorArr } = this.state;\r\n    return (\r\n      <div className=\"visualizer-container\">\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: `${colorArr[idx]}`,\r\n                height: `${value}%`,\r\n                width: `${50 / NUMBER_OF_ARRAY_BARS}%`,\r\n                margin: `0 ${25 / NUMBER_OF_ARRAY_BARS}%`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu-container\">\r\n          <button onClick={() => this.reset()}>Generate</button>\r\n          <button onClick={() => this.bubbleSort()}>Bubble sort</button>\r\n          <button>TODO: Quick sort</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\r\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}