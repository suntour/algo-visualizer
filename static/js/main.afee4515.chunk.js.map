{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["NORMAL_COLOR","COMPLETE_COLOR","SortingVisualizer","props","state","array","sorted","sortInProgress","awaitingReset","changeBarToColor","a","index","color","arrayBars","style","backgroundColor","this","round","document","getElementsByClassName","innerSorted","i","changeBarsToColor","leftBarColor","rightBarColor","sleep","tempArr","slice","temp","setState","length","timeToSleep","Promise","resolve","setTimeout","reset","resetArray","resetColors","forceUpdate","min","max","push","Math","floor","random","className","map","value","idx","height","width","margin","onClick","bubbleSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.afee4515.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 50;\r\nconst ANIMATION_SPEED = 1;\r\n\r\nconst NORMAL_COLOR = \"white\";\r\nconst COMPARE_COLOR = \"orange\";\r\nconst SWAP_COLOR = \"red\";\r\nconst COMPLETE_COLOR = \"green\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      sorted: false,\r\n      sortInProgress: false,\r\n      awaitingReset: false,\r\n    };\r\n  }\r\n\r\n  async bubbleSort() {\r\n    if (this.state.sorted) {\r\n      return;\r\n    }\r\n    if (this.state.sortInProgress) {\r\n      return;\r\n    }\r\n    this.state.sortInProgress = true;\r\n    let round = 0;\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    let innerSorted = false;\r\n\r\n    while (!this.state.sorted && this.state.sortInProgress && !innerSorted) {\r\n      innerSorted = true;\r\n      for (let i = 0; i < this.state.array.length - 1 - round; i++) {\r\n        if (this.state.awaitingReset) {\r\n          this.state.awaitingReset = false;\r\n          return;\r\n        }\r\n        const leftBarColor = arrayBars[i].style;\r\n        const rightBarColor = arrayBars[i + 1].style;\r\n\r\n        function changeBarsToColor(color) {\r\n          leftBarColor.backgroundColor = color;\r\n          rightBarColor.backgroundColor = color;\r\n        }\r\n\r\n        changeBarsToColor(COMPARE_COLOR);\r\n        await this.sleep(ANIMATION_SPEED);\r\n\r\n        if (this.state.array[i] > this.state.array[i + 1]) {\r\n          innerSorted = false;\r\n          changeBarsToColor(SWAP_COLOR);\r\n          await this.sleep(ANIMATION_SPEED);\r\n\r\n          let tempArr = this.state.array.slice();\r\n          let temp = tempArr[i + 1];\r\n\r\n          tempArr[i + 1] = tempArr[i];\r\n          tempArr[i] = temp;\r\n          this.setState({ array: tempArr });\r\n        }\r\n\r\n        changeBarsToColor(NORMAL_COLOR);\r\n        await this.sleep(ANIMATION_SPEED);\r\n      }\r\n      changeBarToColor(this.state.array.length - round - 1, COMPLETE_COLOR);\r\n      round++;\r\n    }\r\n    this.state.sorted = true;\r\n\r\n    for (let i = 0; i < this.state.array.length - round; i++) {\r\n      changeBarToColor(i, COMPLETE_COLOR);\r\n    }\r\n    this.state.sortInProgress = false;\r\n\r\n    function changeBarToColor(index, color) {\r\n      arrayBars[index].style.backgroundColor = color;\r\n    }\r\n  }\r\n\r\n  async sleep(timeToSleep) {\r\n    await new Promise((resolve) => setTimeout(resolve, timeToSleep));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    if (this.state.sortInProgress) {\r\n      this.state.awaitingReset = true;\r\n    }\r\n\r\n    this.resetArray();\r\n    this.resetColors();\r\n    this.state.sorted = false;\r\n    this.state.sortInProgress = false;\r\n  }\r\n\r\n  resetColors() {\r\n    for (let i = 0; i < this.state.array.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      arrayBars[i].style.backgroundColor = NORMAL_COLOR;\r\n    }\r\n  }\r\n\r\n  resetArray() {\r\n    this.resetColors();\r\n    this.forceUpdate();\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 80));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div className=\"visualizer-container\">\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: NORMAL_COLOR,\r\n                height: `${value}%`,\r\n                width: `${(100 * 0.5) / NUMBER_OF_ARRAY_BARS}%`,\r\n                margin: \"0 \" + `${(100 * 0.25) / NUMBER_OF_ARRAY_BARS}%`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu-container\">\r\n          <button onClick={() => this.reset()}>Generate</button>\r\n          <button onClick={() => this.bubbleSort()}>Bubble</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}